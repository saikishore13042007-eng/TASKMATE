import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Users, ListTodo, CheckCircle2, AlertTriangle, TrendingUp, UserCheck } from "lucide-react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Button } from "@/components/ui/button";

import StatsCard from "../components/dashboard/StatsCard";

export default function AdminDashboard() {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      const currentUser = await base44.auth.me();
      setUser(currentUser);
      if (currentUser.role !== 'admin') {
        window.location.href = createPageUrl("Dashboard");
      }
    };
    fetchUser();
  }, []);

  const { data: allUsers = [] } = useQuery({
    queryKey: ['all-users'],
    queryFn: () => base44.entities.User.list(),
    initialData: [],
  });

  const { data: allTasks = [] } = useQuery({
    queryKey: ['all-tasks'],
    queryFn: () => base44.entities.Task.list('-created_date'),
    initialData: [],
  });

  const regularUsers = allUsers.filter(u => u.role !== 'admin');
  const assignedTasks = allTasks.filter(t => t.assigned_to);
  const completedTasks = allTasks.filter(t => t.status === 'completed');
  const overdueTasks = allTasks.filter(t => t.status === 'overdue');

  const getUserTaskStats = () => {
    const stats = {};
    regularUsers.forEach(user => {
      const userTasks = allTasks.filter(t => t.assigned_to === user.email);
      const completed = userTasks.filter(t => t.status === 'completed').length;
      stats[user.email] = {
        name: user.full_name,
        total: userTasks.length,
        completed,
        pending: userTasks.length - completed
      };
    });
    return Object.entries(stats).slice(0, 5);
  };

  return (
    <div className="p-4 md:p-8 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4"
        >
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">
              Admin Dashboard ðŸŽ¯
            </h1>
            <p className="text-slate-600">Manage users and monitor task assignments</p>
          </div>
          <Link to={createPageUrl("TaskAssignment")}>
            <Button className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 shadow-lg">
              Assign Tasks
            </Button>
          </Link>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatsCard
            title="Total Users"
            value={regularUsers.length}
            icon={Users}
            color="from-blue-500 to-cyan-500"
            delay={0.1}
          />
          <StatsCard
            title="Assigned Tasks"
            value={assignedTasks.length}
            icon={ListTodo}
            color="from-purple-500 to-pink-500"
            delay={0.2}
          />
          <StatsCard
            title="Completed"
            value={completedTasks.length}
            icon={CheckCircle2}
            color="from-green-500 to-emerald-500"
            delay={0.3}
          />
          <StatsCard
            title="Overdue"
            value={overdueTasks.length}
            icon={AlertTriangle}
            color="from-red-500 to-pink-500"
            delay={0.4}
          />
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          <Card className="shadow-lg border-none bg-white/80 backdrop-blur-sm">
            <CardHeader className="border-b border-slate-100">
              <CardTitle className="flex items-center gap-2">
                <UserCheck className="w-5 h-5 text-blue-500" />
                User Performance
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                {getUserTaskStats().map(([email, stats], index) => (
                  <div key={email} className="flex items-center justify-between p-4 bg-slate-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-sm">
                          {stats.name?.[0]?.toUpperCase()}
                        </span>
                      </div>
                      <div>
                        <p className="font-medium text-slate-900">{stats.name}</p>
                        <p className="text-sm text-slate-500">{email}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-slate-900">{stats.completed}/{stats.total}</p>
                      <p className="text-xs text-slate-500">completed</p>
                    </div>
                  </div>
                ))}
                {regularUsers.length === 0 && (
                  <div className="text-center py-8 text-slate-500">
                    <p>No users yet</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card className="shadow-lg border-none bg-white/80 backdrop-blur-sm">
            <CardHeader className="border-b border-slate-100">
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-green-500" />
                Quick Actions
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-3">
                <Link to={createPageUrl("UserManagement")}>
                  <Button variant="outline" className="w-full justify-start gap-3 h-auto p-4">
                    <Users className="w-5 h-5 text-blue-500" />
                    <div className="text-left">
                      <p className="font-medium">Manage Users</p>
                      <p className="text-sm text-slate-500">View and manage all users</p>
                    </div>
                  </Button>
                </Link>
                <Link to={createPageUrl("TaskAssignment")}>
                  <Button variant="outline" className="w-full justify-start gap-3 h-auto p-4">
                    <ListTodo className="w-5 h-5 text-purple-500" />
                    <div className="text-left">
                      <p className="font-medium">Assign Tasks</p>
                      <p className="text-sm text-slate-500">Create and assign tasks to users</p>
                    </div>
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
