
import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts";
import { TrendingUp, Target, Clock, Zap } from "lucide-react";
import { format, subDays, isWithinInterval, parseISO } from "date-fns";
import { motion } from "framer-motion";

import StatsCard from "../components/dashboard/StatsCard";

export default function Analytics() {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      const currentUser = await base44.auth.me();
      setUser(currentUser);
    };
    fetchUser();
  }, []);

  const { data: tasks = [] } = useQuery({
    queryKey: ['tasks'],
    queryFn: async () => {
      const allTasks = await base44.entities.Task.list();
      // Filter tasks: show only tasks assigned to user or created by user
      return allTasks.filter(t =>
        t.assigned_to === user?.email ||
        (t.created_by === user?.email && !t.assigned_to)
      );
    },
    enabled: !!user, // Only enable query when user data is available
    initialData: [],
  });

  const completedTasks = tasks.filter(t => t.status === 'completed');
  const totalEstimatedTime = tasks.reduce((sum, t) => sum + (t.estimated_duration || 0), 0);
  const averageCompletionTime = completedTasks.length > 0
    ? totalEstimatedTime / completedTasks.length
    : 0;

  const getLast30Days = () => {
    return Array.from({ length: 30 }, (_, i) => {
      const date = subDays(new Date(), 29 - i);
      const dayTasks = completedTasks.filter(task => {
        if (!task.completed_at) return false;
        return format(parseISO(task.completed_at), 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd');
      });
      return {
        date: format(date, 'MMM d'),
        completed: dayTasks.length
      };
    });
  };

  const categoryData = () => {
    const categories = {};
    tasks.forEach(task => {
      const cat = task.category || 'other';
      categories[cat] = (categories[cat] || 0) + 1;
    });
    return Object.entries(categories).map(([name, value]) => ({
      name: name.charAt(0).toUpperCase() + name.slice(1),
      value
    }));
  };

  const priorityData = () => {
    const priorities = { low: 0, medium: 0, high: 0, urgent: 0 };
    tasks.forEach(task => {
      // Ensure task.priority exists and is one of the keys, otherwise default to 'low'
      if (task.priority && priorities.hasOwnProperty(task.priority)) {
        priorities[task.priority] = (priorities[task.priority] || 0) + 1;
      } else {
        priorities.low = (priorities.low || 0) + 1; // Default to 'low' or handle as 'other'
      }
    });
    return Object.entries(priorities).map(([name, value]) => ({
      name: name.charAt(0).toUpperCase() + name.slice(1),
      value
    }));
  };

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899'];

  return (
    <div className="p-4 md:p-8 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">Analytics Dashboard</h1>
          <p className="text-slate-600">Track your productivity and task completion trends</p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatsCard
            title="Completion Rate"
            value={`${tasks.length > 0 ? Math.round((completedTasks.length / tasks.length) * 100) : 0}%`}
            icon={Target}
            color="from-green-500 to-emerald-500"
            delay={0.1}
          />
          <StatsCard
            title="Completed Tasks"
            value={completedTasks.length}
            icon={TrendingUp}
            color="from-blue-500 to-cyan-500"
            delay={0.2}
          />
          <StatsCard
            title="Avg. Task Time"
            value={`${Math.round(averageCompletionTime)}m`}
            icon={Clock}
            color="from-purple-500 to-pink-500"
            delay={0.3}
          />
          <StatsCard
            title="Total Time Invested"
            value={`${Math.round(totalEstimatedTime / 60)}h`}
            icon={Zap}
            color="from-orange-500 to-amber-500"
            delay={0.4}
          />
        </div>

        <div className="grid lg:grid-cols-2 gap-6 mb-8">
          <Card className="shadow-lg border-none bg-white/80 backdrop-blur-sm">
            <CardHeader className="border-b border-slate-100">
              <CardTitle>30-Day Completion Trend</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={getLast30Days()}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
                  <XAxis
                    dataKey="date"
                    stroke="#64748b"
                    style={{ fontSize: '12px' }}
                    interval={4}
                  />
                  <YAxis stroke="#64748b" style={{ fontSize: '12px' }} />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: '1px solid #e2e8f0',
                      borderRadius: '8px'
                    }}
                  />
                  <Bar dataKey="completed" fill="#3B82F6" radius={[8, 8, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          <Card className="shadow-lg border-none bg-white/80 backdrop-blur-sm">
            <CardHeader className="border-b border-slate-100">
              <CardTitle>Tasks by Category</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={categoryData()}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {categoryData().map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend /> {/* Added legend for pie chart categories */}
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>

        <Card className="shadow-lg border-none bg-white/80 backdrop-blur-sm">
          <CardHeader className="border-b border-slate-100">
            <CardTitle>Priority Distribution</CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={priorityData()} layout="vertical">
                <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
                <XAxis type="number" stroke="#64748b" />
                <YAxis dataKey="name" type="category" stroke="#64748b" />
                <Tooltip />
                <Bar dataKey="value" radius={[0, 8, 8, 0]}>
                  {priorityData().map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index]} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
