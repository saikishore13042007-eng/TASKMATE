import React from "react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";
import { format, isPast, parseISO } from "date-fns";
import { 
  Clock, Calendar, MoreVertical, Pencil, Trash2, 
  CheckCircle2, Circle, AlertCircle, Tag, Zap
} from "lucide-react";

const priorityConfig = {
  low: { color: "bg-blue-100 text-blue-800 border-blue-300", icon: Circle },
  medium: { color: "bg-yellow-100 text-yellow-800 border-yellow-300", icon: AlertCircle },
  high: { color: "bg-orange-100 text-orange-800 border-orange-300", icon: AlertCircle },
  urgent: { color: "bg-red-100 text-red-800 border-red-300", icon: Zap }
};

const statusConfig = {
  pending: { color: "bg-slate-100 text-slate-800", label: "Pending" },
  in_progress: { color: "bg-blue-100 text-blue-800", label: "In Progress" },
  completed: { color: "bg-green-100 text-green-800", label: "Completed" },
  overdue: { color: "bg-red-100 text-red-800", label: "Overdue" }
};

export default function TaskCard({ task, onEdit, onDelete, onStatusChange }) {
  const priorityInfo = priorityConfig[task.priority] || priorityConfig.medium;
  const PriorityIcon = priorityInfo.icon;

  const isOverdue = task.due_date && isPast(parseISO(task.due_date)) && task.status !== 'completed';

  return (
    <Card className="hover:shadow-xl transition-all duration-300 border-none bg-white/90 backdrop-blur-sm group">
      <CardHeader className="pb-3">
        <div className="flex justify-between items-start">
          <div className="flex-1">
            <h3 className={`font-semibold text-lg mb-2 ${task.status === 'completed' ? 'line-through text-slate-500' : 'text-slate-900'}`}>
              {task.title}
            </h3>
            <div className="flex flex-wrap gap-2">
              <Badge variant="outline" className={priorityInfo.color}>
                <PriorityIcon className="w-3 h-3 mr-1" />
                {task.priority}
              </Badge>
              <Badge className={statusConfig[isOverdue ? 'overdue' : task.status]?.color}>
                {statusConfig[isOverdue ? 'overdue' : task.status]?.label}
              </Badge>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="opacity-0 group-hover:opacity-100 transition-opacity">
                <MoreVertical className="w-4 h-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onEdit(task)}>
                <Pencil className="w-4 h-4 mr-2" />
                Edit
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={() => onStatusChange(task, 'pending')}>
                <Circle className="w-4 h-4 mr-2" />
                Mark as Pending
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => onStatusChange(task, 'in_progress')}>
                <Clock className="w-4 h-4 mr-2" />
                Mark as In Progress
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => onStatusChange(task, 'completed')}>
                <CheckCircle2 className="w-4 h-4 mr-2" />
                Mark as Completed
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={() => onDelete(task.id)} className="text-red-600">
                <Trash2 className="w-4 h-4 mr-2" />
                Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent>
        {task.description && (
          <p className="text-sm text-slate-600 mb-4 line-clamp-2">{task.description}</p>
        )}
        
        <div className="space-y-2 text-sm">
          {task.due_date && (
            <div className="flex items-center gap-2 text-slate-600">
              <Calendar className="w-4 h-4" />
              <span className={isOverdue ? 'text-red-600 font-medium' : ''}>
                {format(parseISO(task.due_date), 'PPP')}
              </span>
            </div>
          )}
          {task.estimated_duration && (
            <div className="flex items-center gap-2 text-slate-600">
              <Clock className="w-4 h-4" />
              <span>{task.estimated_duration} minutes</span>
            </div>
          )}
          {task.category && (
            <div className="flex items-center gap-2 text-slate-600">
              <Tag className="w-4 h-4" />
              <span className="capitalize">{task.category}</span>
            </div>
          )}
        </div>

        {task.tags && task.tags.length > 0 && (
          <div className="flex flex-wrap gap-2 mt-4">
            {task.tags.slice(0, 3).map((tag, index) => (
              <Badge key={index} variant="secondary" className="text-xs">
                {tag}
              </Badge>
            ))}
            {task.tags.length > 3 && (
              <Badge variant="secondary" className="text-xs">
                +{task.tags.length - 3}
              </Badge>
            )}
          </div>
        )}

        {task.subtasks && task.subtasks.length > 0 && (
          <div className="mt-4 pt-4 border-t border-slate-100">
            <p className="text-xs text-slate-500 mb-2">
              {task.subtasks.filter(st => st.completed).length} / {task.subtasks.length} subtasks completed
            </p>
            <div className="h-2 bg-slate-100 rounded-full overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-blue-500 to-cyan-500 transition-all duration-300"
                style={{ 
                  width: `${(task.subtasks.filter(st => st.completed).length / task.subtasks.length) * 100}%` 
                }}
              />
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
