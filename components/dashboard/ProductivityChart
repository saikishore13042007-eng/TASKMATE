import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from "recharts";
import { TrendingUp } from "lucide-react";
import { format, subDays, isWithinInterval, parseISO } from "date-fns";

export default function ProductivityChart({ tasks }) {
  const getLast7Days = () => {
    return Array.from({ length: 7 }, (_, i) => {
      const date = subDays(new Date(), 6 - i);
      const dayTasks = tasks.filter(task => {
        if (!task.completed_at) return false;
        const completedDate = parseISO(task.completed_at);
        return format(completedDate, 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd');
      });

      return {
        day: format(date, 'EEE'),
        completed: dayTasks.length,
        date: format(date, 'MMM d')
      };
    });
  };

  const data = getLast7Days();
  const maxValue = Math.max(...data.map(d => d.completed), 1);

  const CustomTooltip = ({ active, payload }) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-3 rounded-lg shadow-lg border border-slate-200">
          <p className="text-sm font-medium text-slate-900">{payload[0].payload.date}</p>
          <p className="text-sm text-slate-600">
            {payload[0].value} task{payload[0].value !== 1 ? 's' : ''} completed
          </p>
        </div>
      );
    }
    return null;
  };

  return (
    <Card className="shadow-lg border-none bg-white/80 backdrop-blur-sm">
      <CardHeader className="border-b border-slate-100 pb-4">
        <CardTitle className="flex items-center gap-2 text-xl">
          <TrendingUp className="w-5 h-5 text-green-500" />
          Weekly Productivity
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
            <XAxis 
              dataKey="day" 
              stroke="#64748b"
              style={{ fontSize: '12px' }}
            />
            <YAxis 
              stroke="#64748b"
              style={{ fontSize: '12px' }}
            />
            <Tooltip content={<CustomTooltip />} />
            <Bar dataKey="completed" radius={[8, 8, 0, 0]}>
              {data.map((entry, index) => (
                <Cell 
                  key={`cell-${index}`} 
                  fill={`hsl(${200 + (entry.completed / maxValue) * 60}, 80%, ${50 + (entry.completed / maxValue) * 20}%)`}
                />
              ))}
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}
