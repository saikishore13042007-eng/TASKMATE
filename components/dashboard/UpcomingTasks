import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { motion, AnimatePresence } from "framer-motion";
import { format, isToday, isTomorrow, parseISO } from "date-fns";
import { Clock, Calendar, AlertCircle } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

const priorityColors = {
  low: "bg-blue-100 text-blue-800 border-blue-300",
  medium: "bg-yellow-100 text-yellow-800 border-yellow-300",
  high: "bg-orange-100 text-orange-800 border-orange-300",
  urgent: "bg-red-100 text-red-800 border-red-300"
};

export default function UpcomingTasks({ tasks, isLoading }) {
  const getDateLabel = (dateString) => {
    const date = parseISO(dateString);
    if (isToday(date)) return { label: "Today", color: "text-green-600" };
    if (isTomorrow(date)) return { label: "Tomorrow", color: "text-blue-600" };
    return { label: format(date, "MMM d, yyyy"), color: "text-slate-600" };
  };

  return (
    <Card className="shadow-lg border-none bg-white/80 backdrop-blur-sm">
      <CardHeader className="border-b border-slate-100 pb-4">
        <CardTitle className="flex items-center gap-2 text-xl">
          <Calendar className="w-5 h-5 text-blue-500" />
          Upcoming Tasks
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        {isLoading ? (
          <div className="space-y-4">
            {[1, 2, 3].map(i => (
              <div key={i} className="flex gap-4">
                <Skeleton className="w-12 h-12 rounded-lg" />
                <div className="flex-1 space-y-2">
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-3 w-1/2" />
                </div>
              </div>
            ))}
          </div>
        ) : tasks.length === 0 ? (
          <div className="text-center py-12">
            <AlertCircle className="w-12 h-12 text-slate-300 mx-auto mb-4" />
            <p className="text-slate-500 mb-4">No upcoming tasks</p>
            <Link to={createPageUrl("TaskManager")}>
              <Badge variant="outline" className="cursor-pointer hover:bg-slate-100">
                Create your first task
              </Badge>
            </Link>
          </div>
        ) : (
          <div className="space-y-3">
            <AnimatePresence>
              {tasks.map((task, index) => {
                const dateInfo = getDateLabel(task.due_date);
                return (
                  <motion.div
                    key={task.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-start gap-4 p-4 rounded-lg border border-slate-200 hover:border-blue-300 hover:bg-blue-50/50 transition-all duration-200 cursor-pointer group"
                  >
                    <div className={`p-3 rounded-lg bg-gradient-to-br ${
                      task.priority === 'urgent' ? 'from-red-500 to-pink-500' :
                      task.priority === 'high' ? 'from-orange-500 to-amber-500' :
                      task.priority === 'medium' ? 'from-yellow-500 to-orange-500' :
                      'from-blue-500 to-cyan-500'
                    } shadow-md group-hover:shadow-lg transition-shadow`}>
                      <Clock className="w-6 h-6 text-white" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="font-semibold text-slate-900 mb-1 truncate group-hover:text-blue-600 transition-colors">
                        {task.title}
                      </h4>
                      <div className="flex flex-wrap items-center gap-2 text-sm">
                        <span className={`font-medium ${dateInfo.color}`}>
                          {dateInfo.label}
                        </span>
                        <span className="text-slate-400">•</span>
                        <Badge variant="outline" className={priorityColors[task.priority]}>
                          {task.priority}
                        </Badge>
                        {task.category && (
                          <>
                            <span className="text-slate-400">•</span>
                            <span className="text-slate-500 capitalize">{task.category}</span>
                          </>
                        )}
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </AnimatePresence>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
